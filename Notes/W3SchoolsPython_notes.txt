
-------------------------------------------
W3Schools Phython notes
-------------------------------------------

It is possible to write Python in an Integrated Development Environment, such as Thonny, Pycharm, Netbeans or Eclipse which are particularly 
useful when managing larger collections of Python files.
Python uses new lines to complete a command
Python relies on indentation, using whitespace, to define scope; such as the scope of loops, functions and classes.
download it for free from the following website: https://www.python.org/
Python is an interpreted programming language
Python can be run as a command line itself >>> print("Hello, World!")
exit() exit from python
#This is a comment.
multiline comments - Python uses triple quotes at the beginning and end of the docstring - 
"""This is a 
multiline docstring."""
A variable is created the moment you first assign a value to it.
To verify the type of any object in Python, use the type() function:
There are three numeric types in Python: int, float, complex
Casting in python
int() , float(), str()
string literal 'hello' is the same as "hello".
Python does not have a character data type, a single character is simply a string with a length of 1. Square brackets can be used to access elements of the string.
a = "Hello, World!"
print(a[1]) print(b[2:5])
x.strip() method removes any whitespace from the beginning or the end:
x.lower(), x.upper()
x.replace("H", "J")
x.split("," 
len(x)
Command-line String Input
input()
Logical Operators - and or not
Identity Operators - is is not

Membership Operators - in, not in
x = ["apple", "banana"]
print("banana" in x)

collection data types
List is a collection which is ordered and changeable. Allows duplicate members.
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered and unindexed. No duplicate members.
Dictionary is a collection which is unordered, changeable and indexed. No duplicate members.

Lists []
thislist = ["apple", "banana", "cherry"]
for x in thislist:
  print(x)

vthislist = ["apple", "banana", "cherry"]
if "apple" in thislist:
  print("Yes, 'apple' is in the fruits list")

To add an item to the end of the list, use the append()
To add an item at the specified index, use the insert()
remove() method removes the specified item
pop() method removes the specified index, (or the last item if index is not specified)
del keyword removes the specified index:
del thislist[0]
del keyword can also delete the list completely:
del thislist
clear() method empties the list
thislist.clear()
Copy a List
thislist.copy()  - list(thislist)
list() constructor to make a new list 
thislist = list(("apple", "banana", "cherry")) # note the double round-brackets

-------------------
Tuple ()- tuple is a collection which is ordered and unchangeable(no addition deletions and modifications allowed in tuple items). 
In Python tuples are written with round brackets.
thistuple = ("apple", "banana", "cherry")
Access Tuple Items print(thistuple[1])
del keyword can delete the tuple complet

tuple() Constructor
thistuple = tuple(("apple", "banana", "cherry")) # note the double round-brackets


Set {}
A set is a collection which is unordered and unindexed. In Python sets are written with curly brackets.
thisset = {"apple", "banana", "cherry"}
Once a set is created, you cannot change its items, but you can add new items.
To add one item to a set use the add() method.
To add more than one item to a set use the update() method.
remove() will raise an error.
discard() will NOT raise an error.
last item by using the pop() method

Dictionary {"key" : "value","key" : "value"}
A dictionary is a collection which is unordered, changeable and indexed. 
In Python dictionaries are written with curly brackets, and they have keys and values.
Get the value of the key:  x = thisdict["model"]
get() that will give you the same result
copy of a dictionary with the copy() method
dict() mydict = dict(thisdict)

if else constructor
a = 200
b = 33
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
else:
  print("a is greater than b")
  
Short Hand If ... Else
print("A") if a > b else print("B")

range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.
for x in range(6):
  print(x)  print 0 to 5
it is possible to specify the increment value by adding a third parameter: range(2, 30, 3):

------------------------
Creating a Function  
------------------------
def keyword:
def my_function():
  print("Hello from a function")

Default Parameter Value  
def my_function(country = "Norway"):

A lambda function is a small anonymous function.
A lambda function can take any number of arguments, but can only have one expression.

x = lambda a, b : a * b
print(x(5, 6))

ARRAYS
Note: Python does not have built-in support for Arrays, but Python Lists can be used instead.

------------------------
Python Classes/Objects
------------------------
class MyClass:
  x = 5   Instance variable

__init__():  All classes have a function called __init__(), which is always executed when the class is being initiated.  
it is called automatically every time the class is being used to create a new object.

self should be used to represent instance variables

class mycls:
  def __init__(self,x,y):
    print("x:" + str(x) + "-" + "y:" + str(y))
    self.x=x
    self.y=y
    print("x:" + str(x) + "-" + "y:" + str(y))
	
class mycls:
  def __init__(self, x1,y1):
    self.x1=5
    self.y1=10
    print("x1:" + str(x1) + "-" + "y1:" + str(y1))
  def swap(self,a,b):
    self.x1=a
    self.y1=b
  def dis(self):
    print("x1:" + str(self.x1) + "-" + "y1:" + str(self.y1))
	
------------------------
module to be the same as a code library.
------------------------
module just save the code you want in a file with the file extension .py:
import mymodule
mymodule.greeting("Jonathan")

Re-naming a Module
import mymodule as mx
a = mx.person1["age"]

Built-in Modules
import platform
x = platform.system()
x = dir(platform)
import only parts from a module, by using the from keyword.
from mymodule import person1


Python Datetime
import datetime
x = datetime.datetime.now()
x = datetime.datetime(2020, 5, 17) - to create date object
strftime() - formatting date objects into readable strings
print(x.strftime("%B"))


Python JSON - 
built-in package
import json
x =  '{ "name":"John", "age":30, "city":"New York"}'

import json

Convert from JSON to Python
import json
# some JSON:
x =  '{ "name":"John", "age":30, "city":"New York"}'
# parse x:
y = json.loads(x)   #Json to python
# the result is a Python dictionary:
print(y["age"])

Convert from Python to JSON

import json
# a Python object (dict):
x = {
  "name": "John",
  "age": 30,
  "city": "New York"
}
# convert into JSON:
y = json.dumps(x) # convert into JSON:
# the result is a JSON string:
print(y)


import json
print(json.dumps({"name": "John", "age": 30}))
print(json.dumps(["apple", "bananas"]))
print(json.dumps(("apple", "bananas")))
print(json.dumps("hello"))
print(json.dumps(42))
print(json.dumps(31.76))
print(json.dumps(True))
print(json.dumps(False))
print(json.dumps(None))

Convert a Python object containing all the legal data types:
import json

x = {
  "name": "John",
  "age": 30,
  "married": True,
  "divorced": False,
  "children": ("Ann","Billy"),
  "pets": None,
  "cars": [
    {"model": "BMW 230", "mpg": 27.5},
    {"model": "Ford Edge", "mpg": 24.1}
  ]
}

print(json.dumps(x))
{"name": "John", "age": 30, "married": true, "divorced": false, "children": ["An
n", "Billy"], "pets": null, "cars": [{"model": "BMW 230", "mpg": 27.5}, {"model"
: "Ford Edge", "mpg": 24.1}]}

Format the Result
json.dumps(x, indent=4)

Python RegEx
import re
import re

txt = "The rain in Spain"
x = re.search("^The.*Spain$", txt)

------------------------
Python PIP
------------------------
IP is a package manager for Python packages, or modules
Python version 3.4 or later, PIP is included by default.
